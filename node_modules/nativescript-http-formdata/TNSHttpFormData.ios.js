"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TNSHttpFormData = /** @class */ (function () {
    function TNSHttpFormData() {
    }
    // upload(url: string, data: NSData, parameterName: string, fileName: string, contentType) {
    TNSHttpFormData.prototype.upload = function (url, params) {
        return new Promise(function (resolve, reject) {
            var multipartFormData = OMGMultipartFormData.new();
            for (var _i = 0, params_1 = params; _i < params_1.length; _i++) {
                var param = params_1[_i];
                if (param.fileName && param.contentType) {
                    multipartFormData.addFileParameterNameFilenameContentType(param.data, param.parameterName, param.fileName, param.contentType);
                }
                else {
                    multipartFormData.addTextParameterName(param.data, param.parameterName);
                }
            }
            var request = OMGHTTPURLRQ.POSTError(url, multipartFormData);
            NSURLConnection.sendAsynchronousRequestQueueCompletionHandler(request, NSOperationQueue.currentQueue, function (response, data, error) {
                if (error) {
                    reject(error);
                    return;
                }
                var httpResponse = response;
                switch (httpResponse.statusCode) {
                    case 200:
                        resolve(true);
                        break;
                    case 500:
                        reject('Something went wrong on server');
                        break;
                    default:
                        resolve(false);
                        break;
                }
            });
        });
    };
    return TNSHttpFormData;
}());
exports.TNSHttpFormData = TNSHttpFormData;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVE5TSHR0cEZvcm1EYXRhLmlvcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlROU0h0dHBGb3JtRGF0YS5pb3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQTtJQUNJO0lBRUEsQ0FBQztJQUVELDRGQUE0RjtJQUM1RixnQ0FBTSxHQUFOLFVBQU8sR0FBVyxFQUFFLE1BQW1DO1FBQ25ELE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBQy9CLElBQUksaUJBQWlCLEdBQUcsb0JBQW9CLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDbkQsR0FBRyxDQUFBLENBQWMsVUFBTSxFQUFOLGlCQUFNLEVBQU4sb0JBQU0sRUFBTixJQUFNO2dCQUFuQixJQUFJLEtBQUssZUFBQTtnQkFDVCxFQUFFLENBQUEsQ0FBQyxLQUFLLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO29CQUNyQyxpQkFBaUIsQ0FBQyx1Q0FBdUMsQ0FDckQsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUM1RSxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLGlCQUFpQixDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUM1RSxDQUFDO2FBQ0o7WUFFRCxJQUFJLE9BQU8sR0FBd0IsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztZQUNsRixlQUFlLENBQUMsNkNBQTZDLENBQ3pELE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsVUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUs7Z0JBQzFELEVBQUUsQ0FBQSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQ1AsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUNkLE1BQU0sQ0FBQztnQkFDWCxDQUFDO2dCQUNELElBQU0sWUFBWSxHQUF5QyxRQUFRLENBQUM7Z0JBQ3BFLE1BQU0sQ0FBQSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO29CQUM3QixLQUFLLEdBQUc7d0JBQ0osT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNsQixLQUFLLENBQUM7b0JBQ04sS0FBSyxHQUFHO3dCQUNKLE1BQU0sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO3dCQUM3QyxLQUFLLENBQUM7b0JBQ047d0JBQ0ksT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUNuQixLQUFLLENBQUM7Z0JBQ1YsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ1gsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ0wsc0JBQUM7QUFBRCxDQUFDLEFBeENELElBd0NDO0FBeENZLDBDQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVE5TSHR0cEZvcm1EYXRhUGFyYW0gfSBmcm9tIFwiLi9pbmRleFwiO1xuXG5cbmV4cG9ydCBjbGFzcyBUTlNIdHRwRm9ybURhdGEge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgfVxuXG4gICAgLy8gdXBsb2FkKHVybDogc3RyaW5nLCBkYXRhOiBOU0RhdGEsIHBhcmFtZXRlck5hbWU6IHN0cmluZywgZmlsZU5hbWU6IHN0cmluZywgY29udGVudFR5cGUpIHtcbiAgICB1cGxvYWQodXJsOiBzdHJpbmcsIHBhcmFtczogQXJyYXk8VE5TSHR0cEZvcm1EYXRhUGFyYW0+KTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBsZXQgbXVsdGlwYXJ0Rm9ybURhdGEgPSBPTUdNdWx0aXBhcnRGb3JtRGF0YS5uZXcoKTsgICAgXG4gICAgICAgICAgICBmb3IobGV0IHBhcmFtIG9mIHBhcmFtcykge1xuICAgICAgICAgICAgICAgIGlmKHBhcmFtLmZpbGVOYW1lICYmIHBhcmFtLmNvbnRlbnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIG11bHRpcGFydEZvcm1EYXRhLmFkZEZpbGVQYXJhbWV0ZXJOYW1lRmlsZW5hbWVDb250ZW50VHlwZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtLmRhdGEsIHBhcmFtLnBhcmFtZXRlck5hbWUsIHBhcmFtLmZpbGVOYW1lLCBwYXJhbS5jb250ZW50VHlwZSk7ICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG11bHRpcGFydEZvcm1EYXRhLmFkZFRleHRQYXJhbWV0ZXJOYW1lKHBhcmFtLmRhdGEsIHBhcmFtLnBhcmFtZXRlck5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHJlcXVlc3Q6IE5TTXV0YWJsZVVSTFJlcXVlc3QgPSBPTUdIVFRQVVJMUlEuUE9TVEVycm9yKHVybCwgbXVsdGlwYXJ0Rm9ybURhdGEpO1xuICAgICAgICAgICAgTlNVUkxDb25uZWN0aW9uLnNlbmRBc3luY2hyb25vdXNSZXF1ZXN0UXVldWVDb21wbGV0aW9uSGFuZGxlcihcbiAgICAgICAgICAgICAgICByZXF1ZXN0LCBOU09wZXJhdGlvblF1ZXVlLmN1cnJlbnRRdWV1ZSwgKHJlc3BvbnNlLCBkYXRhLCBlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZihlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBodHRwUmVzcG9uc2U6IE5TSFRUUFVSTFJlc3BvbnNlID0gPE5TSFRUUFVSTFJlc3BvbnNlPnJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2goaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgnU29tZXRoaW5nIHdlbnQgd3Jvbmcgb24gc2VydmVyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufSJdfQ==