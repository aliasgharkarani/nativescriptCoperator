"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var page_1 = require("ui/page");
var nativescript_bottom_navigation_1 = require("nativescript-bottom-navigation");
// import { registerElement } from "nativescript-angular/element-registry";
// registerElement("Fab", () => require("nativescript-floatingactionbutton").Fab);
//import { registerElement } from "nativescript-angular/element-registry";
//import { CardView } from "nativescript-cardview";
//registerElement("CardView", () => CardView);
// import * as elementRegistryModule from "nativescript-angular/element-registry";
// import * as LabelModule from "tns-core-modules/ui/label";
// elementRegistryModule.registerElement(
//   "CardView",
//   () => require("nativescript-cardview").CardView
// );
var ProfileComponent = /** @class */ (function () {
    function ProfileComponent(page) {
        this.page = page;
        this.selectedTab = 0;
        this.tabs = [
            new nativescript_bottom_navigation_1.BottomNavigationTab('First', 'shop'),
            new nativescript_bottom_navigation_1.BottomNavigationTab('Second', 'box', false),
            new nativescript_bottom_navigation_1.BottomNavigationTab('Third', 'accept'),
            new nativescript_bottom_navigation_1.BottomNavigationTab('Fourth', 'user')
        ];
    }
    ProfileComponent.prototype.ngOnInit = function () {
        this._bottomNavigation = this.page.getViewById('bottomNavigation');
    };
    ProfileComponent.prototype.onBottomNavigationTabSelected = function (args) {
        this.selectedTab = args.newIndex;
        if (this.selectedTab === 1) {
            alert('This item has selectable: false, and should be used to perform actions');
        }
        console.log("old tab index:  " + args.oldIndex);
        console.log("selected tab index:  " + args.newIndex);
    };
    ProfileComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: "ns-profile",
            templateUrl: "./profile.component.html",
            styleUrls: ["./profile-common.css", "./profile.component.css"],
        }),
        __metadata("design:paramtypes", [page_1.Page])
    ], ProfileComponent);
    return ProfileComponent;
}());
exports.ProfileComponent = ProfileComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZmlsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwcm9maWxlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUFpRTtBQVNqRSxnQ0FBK0I7QUFlL0IsaUZBSXdDO0FBUXhDLDJFQUEyRTtBQUMzRSxrRkFBa0Y7QUFDbEYsMEVBQTBFO0FBQzFFLG1EQUFtRDtBQUNuRCw4Q0FBOEM7QUFFOUMsa0ZBQWtGO0FBQ2xGLDREQUE0RDtBQUM1RCx5Q0FBeUM7QUFDekMsZ0JBQWdCO0FBQ2hCLG9EQUFvRDtBQUNwRCxLQUFLO0FBV0w7SUFhRSwwQkFBb0IsSUFBVTtRQUFWLFNBQUksR0FBSixJQUFJLENBQU07UUFWdkIsZ0JBQVcsR0FBVyxDQUFDLENBQUM7UUFDeEIsU0FBSSxHQUEwQjtZQUNuQyxJQUFJLG9EQUFtQixDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUM7WUFDeEMsSUFBSSxvREFBbUIsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQztZQUMvQyxJQUFJLG9EQUFtQixDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUM7WUFDMUMsSUFBSSxvREFBbUIsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDO1NBQzFDLENBQUM7SUFJZ0MsQ0FBQztJQUVuQyxtQ0FBUSxHQUFSO1FBQ0UsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDckUsQ0FBQztJQUVELHdEQUE2QixHQUE3QixVQUE4QixJQUE0QjtRQUN4RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDakMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNCLEtBQUssQ0FBQyx3RUFBd0UsQ0FBQyxDQUFDO1FBQ2xGLENBQUM7UUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFtQixJQUFJLENBQUMsUUFBVSxDQUFDLENBQUM7UUFDaEQsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBd0IsSUFBSSxDQUFDLFFBQVUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUExQlUsZ0JBQWdCO1FBUjVCLGdCQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDbkIsUUFBUSxFQUFFLFlBQVk7WUFDdEIsV0FBVyxFQUFFLDBCQUEwQjtZQUN2QyxTQUFTLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSx5QkFBeUIsQ0FBQztTQUMvRCxDQUFDO3lDQWdCMEIsV0FBSTtPQWJuQixnQkFBZ0IsQ0FrQzVCO0lBQUQsdUJBQUM7Q0FBQSxBQWxDRCxJQWtDQztBQWxDWSw0Q0FBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IFJvdXRlciwgQWN0aXZhdGVkUm91dGUgfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XHJcbmltcG9ydCB7IExvY2F0aW9uIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xyXG5pbXBvcnQgeyBTbmFja0JhciB9IGZyb20gXCJuYXRpdmVzY3JpcHQtc25hY2tiYXJcIjtcclxuaW1wb3J0ICogYXMgQXBwbGljYXRpb25TZXR0aW5ncyBmcm9tIFwiYXBwbGljYXRpb24tc2V0dGluZ3NcIjtcclxuaW1wb3J0IHsgY29ubmVjdGlvblR5cGUsIGdldENvbm5lY3Rpb25UeXBlIH0gZnJvbSBcImNvbm5lY3Rpdml0eVwiO1xyXG5pbXBvcnQgeyBBbmltYXRpb24gfSBmcm9tIFwidWkvYW5pbWF0aW9uXCI7XHJcbmltcG9ydCB7IFZpZXcgfSBmcm9tIFwidWkvY29yZS92aWV3XCI7XHJcbmltcG9ydCB7IHByb21wdCB9IGZyb20gXCJ1aS9kaWFsb2dzXCI7XHJcbmltcG9ydCB7IFBhZ2UgfSBmcm9tIFwidWkvcGFnZVwiO1xyXG5pbXBvcnQgeyBUZXh0RmllbGQgfSBmcm9tIFwidWkvdGV4dC1maWVsZFwiO1xyXG5cclxuaW1wb3J0IHsgVmFsdWVMaXN0LCBEcm9wRG93biB9IGZyb20gXCJuYXRpdmVzY3JpcHQtZHJvcC1kb3duXCI7XHJcbmltcG9ydCB7IFNlbGVjdGVkSW5kZXhDaGFuZ2VkRXZlbnREYXRhIH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1kcm9wLWRvd25cIjtcclxuaW1wb3J0IHsgQ29vcGVyYXRpdmUsIFVzZXIgfSBmcm9tIFwiLi4vLi4vbW9kZWxzL2luZGV4XCI7XHJcbmltcG9ydCB7IENvb3BlcmF0aXZlU2VydmljZSB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9jb29wZXJhdGl2ZS5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IENvb3BlcmF0aXZlU3RhZmZTZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL2Nvb3BlcmF0aXZlU3RhZmYuc2VydmljZVwiO1xyXG5cclxuaW1wb3J0IHsgTWVtYmVyU2VydmljZSB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9tZW1iZXIuc2VydmljZVwiO1xyXG5cclxuaW1wb3J0IHsgQ29vcGVyYXRpdmVTdGFmZiwgVmVyaWZ5QXV0aCB9IGZyb20gXCIuLi8uLi9tb2RlbHMvaW5kZXhcIjtcclxuXHJcbmltcG9ydCB7IFROU0ZhbmN5QWxlcnQgfSBmcm9tIFwibmF0aXZlc2NyaXB0LWZhbmN5YWxlcnRcIjtcclxuXHJcbmltcG9ydCB7XHJcbiAgQm90dG9tTmF2aWdhdGlvbixcclxuICBCb3R0b21OYXZpZ2F0aW9uVGFiLFxyXG4gIE9uVGFiU2VsZWN0ZWRFdmVudERhdGFcclxufSBmcm9tIFwibmF0aXZlc2NyaXB0LWJvdHRvbS1uYXZpZ2F0aW9uXCI7XHJcbmltcG9ydCB7XHJcbiAgQW5kcm9pZERhdGEsXHJcbiAgRWxldmF0aW9uLFxyXG4gIFNoYXBlLFxyXG4gIFNoYXBlRW51bVxyXG59IGZyb20gXCJuYXRpdmVzY3JpcHQtbmctc2hhZG93XCI7XHJcblxyXG4vLyBpbXBvcnQgeyByZWdpc3RlckVsZW1lbnQgfSBmcm9tIFwibmF0aXZlc2NyaXB0LWFuZ3VsYXIvZWxlbWVudC1yZWdpc3RyeVwiO1xyXG4vLyByZWdpc3RlckVsZW1lbnQoXCJGYWJcIiwgKCkgPT4gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1mbG9hdGluZ2FjdGlvbmJ1dHRvblwiKS5GYWIpO1xyXG4vL2ltcG9ydCB7IHJlZ2lzdGVyRWxlbWVudCB9IGZyb20gXCJuYXRpdmVzY3JpcHQtYW5ndWxhci9lbGVtZW50LXJlZ2lzdHJ5XCI7XHJcbi8vaW1wb3J0IHsgQ2FyZFZpZXcgfSBmcm9tIFwibmF0aXZlc2NyaXB0LWNhcmR2aWV3XCI7XHJcbi8vcmVnaXN0ZXJFbGVtZW50KFwiQ2FyZFZpZXdcIiwgKCkgPT4gQ2FyZFZpZXcpO1xyXG5cclxuLy8gaW1wb3J0ICogYXMgZWxlbWVudFJlZ2lzdHJ5TW9kdWxlIGZyb20gXCJuYXRpdmVzY3JpcHQtYW5ndWxhci9lbGVtZW50LXJlZ2lzdHJ5XCI7XHJcbi8vIGltcG9ydCAqIGFzIExhYmVsTW9kdWxlIGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2xhYmVsXCI7XHJcbi8vIGVsZW1lbnRSZWdpc3RyeU1vZHVsZS5yZWdpc3RlckVsZW1lbnQoXHJcbi8vICAgXCJDYXJkVmlld1wiLFxyXG4vLyAgICgpID0+IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtY2FyZHZpZXdcIikuQ2FyZFZpZXdcclxuLy8gKTtcclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBtb2R1bGVJZDogbW9kdWxlLmlkLFxyXG4gIHNlbGVjdG9yOiBcIm5zLXByb2ZpbGVcIixcclxuICB0ZW1wbGF0ZVVybDogXCIuL3Byb2ZpbGUuY29tcG9uZW50Lmh0bWxcIixcclxuICBzdHlsZVVybHM6IFtcIi4vcHJvZmlsZS1jb21tb24uY3NzXCIsIFwiLi9wcm9maWxlLmNvbXBvbmVudC5jc3NcIl0sXHJcbn0pXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFByb2ZpbGVDb21wb25lbnQge1xyXG5cclxuXHJcbiAgcHVibGljIHNlbGVjdGVkVGFiOiBudW1iZXIgPSAwO1xyXG4gIHB1YmxpYyB0YWJzOiBCb3R0b21OYXZpZ2F0aW9uVGFiW10gPSBbXHJcbiAgICBuZXcgQm90dG9tTmF2aWdhdGlvblRhYignRmlyc3QnLCAnc2hvcCcpLFxyXG4gICAgbmV3IEJvdHRvbU5hdmlnYXRpb25UYWIoJ1NlY29uZCcsICdib3gnLCBmYWxzZSksXHJcbiAgICBuZXcgQm90dG9tTmF2aWdhdGlvblRhYignVGhpcmQnLCAnYWNjZXB0JyksXHJcbiAgICBuZXcgQm90dG9tTmF2aWdhdGlvblRhYignRm91cnRoJywgJ3VzZXInKVxyXG4gIF07XHJcblxyXG4gIHByaXZhdGUgX2JvdHRvbU5hdmlnYXRpb246IEJvdHRvbU5hdmlnYXRpb247XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcGFnZTogUGFnZSkgeyB9XHJcblxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5fYm90dG9tTmF2aWdhdGlvbiA9IHRoaXMucGFnZS5nZXRWaWV3QnlJZCgnYm90dG9tTmF2aWdhdGlvbicpO1xyXG4gIH1cclxuXHJcbiAgb25Cb3R0b21OYXZpZ2F0aW9uVGFiU2VsZWN0ZWQoYXJnczogT25UYWJTZWxlY3RlZEV2ZW50RGF0YSk6IHZvaWQge1xyXG4gICAgdGhpcy5zZWxlY3RlZFRhYiA9IGFyZ3MubmV3SW5kZXg7XHJcbiAgICBpZiAodGhpcy5zZWxlY3RlZFRhYiA9PT0gMSkge1xyXG4gICAgICBhbGVydCgnVGhpcyBpdGVtIGhhcyBzZWxlY3RhYmxlOiBmYWxzZSwgYW5kIHNob3VsZCBiZSB1c2VkIHRvIHBlcmZvcm0gYWN0aW9ucycpO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5sb2coYG9sZCB0YWIgaW5kZXg6ICAke2FyZ3Mub2xkSW5kZXh9YCk7XHJcbiAgICBjb25zb2xlLmxvZyhgc2VsZWN0ZWQgdGFiIGluZGV4OiAgJHthcmdzLm5ld0luZGV4fWApO1xyXG4gIH1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbn0iXX0=